def lesson2_task1():
    '''
    Определение типа результата выражений:
        15 * 3
        15 / 3
        15 // 2
        15 ** 2
    '''
    print("###########################################################################")
    print("#                    У Р О К  - 2     З А Д А Ч А  - 1                    #")
    print("###########################################################################\n")

    print("тип результата выражения 15 * 3  :", type(15 * 3))
    print("тип результата выражения 15 / 3  :", type(15 / 3))
    print("тип результата выражения 15 // 2 :", type(15 // 2))
    print("тип результата выражения 15 ** 2 :", type(15 ** 2))
    print("")

def is_int(str):
    try:
        int(str)
        return True
    except ValueError:
        return False

def is_float(str):
    try:
        float(str)
        return True
    except ValueError:
        return False


def lesson2_task2():
    '''
    Исхолный список:
    ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
    Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками
    (добавить кавычку до и кавычку после элемента списка, являющегося числом) и
    дополнить нулём до двух целочисленных разрядов:
    ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"',
    '+05', '"', 'градусов']
    Сформировать из обработанного списка строку:
    в "05" часов "17" минут температура воздуха была "+05" градусов
    '''

    print("###########################################################################")
    print("#                    У Р О К  - 2     З А Д А Ч А  - 2(3)                 #")
    print("###########################################################################\n")

    src_list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
    print("Исходный список:")
    print(src_list)
    for i in range(len(src_list)-1, -1, -1):
        if is_int(src_list[i]):
        #if isinstance(src_list[i], int): - не сработает. Это строка
            src_list.insert(i+1, '\"')
            if src_list[i][0] == '+' or src_list[i][0] == '-':
                src_list[i] = f"{src_list[i].zfill(3)}"
            else:
                src_list[i] =f"{src_list[i].zfill(2)}"
            src_list.insert(i, '\"')
    print("\nСписок с вставленными кавычками:")
    print(src_list)

    res_string = " ".join(src_list)
    first = True
    ind = res_string.find(" \" ")
    while ind != -1:
        if first:
            res_string = res_string[:ind+2] + res_string[ind+3:]
            first = False
        else:
            res_string = res_string[:ind] + res_string[ind+1:]
            first = True
        ind = res_string.find(" \" ")
    print("\nИтоговая строка:")
    print(res_string)
    print("")

def lesson2_task4():
    '''
    Дан список, содержащий искажённые данные с должностями и именами сотрудников.
    Имя сотрудника всегда в конце строки.
    Сформировать и вывести на экран фразы вида: 'Привет, Игорь!'
    '''
    print("###########################################################################")
    print("#                    У Р О К  - 2     З А Д А Ч А  - 4                    #")
    print("###########################################################################\n")

    data = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА',
            'токарь высшего разряда нИКОЛАй', 'директор аэлита']

    print("Вариант с формированием подсписка:")
    for elem in data:
        print(f"Привет, {elem.split(' ')[-1].title()}!")

    print("\nВариант без формирования списка:")
    for elem in data:
        print(f"Привет, {elem[elem.rindex(' ')+1:].title()}!")

    print("")

def lesson2_task5():
    '''
    Создать вручную список, содержащий цены на товары (10–20 товаров), например:
    [57.8, 46.51, 97, ...]
    A. Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде
    <r> руб <kk> коп (например «5 руб 04 коп»). Подумать, как из цены получить рубли и копейки,
    как добавить нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп
    или 00 коп).
    B. Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать, что
    объект списка после сортировки остался тот же).
    C. Создать новый список, содержащий те же цены, но отсортированные по убыванию.
    D. Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по
    возрастанию, написав минимум кода?
	
	Комментарий: в данной реализации в случае если цен будет введено меньше 5, 
	то в списке 5 самых дорогих товаров недостающие будут заменены -1
    '''
    print("###########################################################################")
    print("#                    У Р О К  - 2     З А Д А Ч А  - 5                    #")
    print("###########################################################################\n")

    # Для красивого вывода
    list_name = [
        "Исходный список цен",
        "Отсортированный по возрастанию исходный список",
        "Новый список, отсортированный по убыванию"
    ]
    max_len = 0
    len_space = []
    for elem in list_name:
        if len(elem) > max_len:
            max_len = len(elem)
    for i in range(len(list_name)):
        list_name[i] += (max_len - len(list_name[i]) + 3) * " "
        #len_space.append(max_len - len(list_name[i]) + 3)

    # исходный список
    #lst_prices = [57.8, 3.2, 46.51, 9, 7.3, 10.5, 1.8, 3, 8, 24.0]
    lst_prices =[]
    while (True):
        lst_prices =input("Введите цены на товары в одну строку(цены д.б.разделены пробелом): " ).split()
        print(lst_prices)
		
        for ind in range(len(lst_prices)-1, -1, -1):
            if lst_prices[ind] == "":
                lst_prices.remove(ind)

        for ind in range(len(lst_prices)):
            if is_int(lst_prices[ind]) == True:
                lst_prices[ind] = int(lst_prices[ind])
            elif is_float(lst_prices[ind]) == True:
                lst_prices[ind] = float(lst_prices[ind])
            else:
                print(f"Введена некорректная цена - {lst_prices[ind]} !!!")
                break
        else:
            break

    # A. Вывод цен исх.списка в заданном формате
    print("Исходная строка в заданном формате:")
    txt_prices = [f'{int(price * 100) // 100} руб {int(price * 100) % 100:02} коп' for price in lst_prices]
    print(", ".join(txt_prices))

    # Вывод идентификатора и значения исходного списка
    print(f"\n{list_name[0]}(ID = {id(lst_prices)}):", lst_prices)

    # В. Сортировка исходного списка по возрастанию
    #    вывод его идентификатора и значения
    lst_prices.sort(reverse=False)
    print(f"{list_name[1]}(ID = {id(lst_prices)}):", lst_prices)

    # С. Создание нового списка из исходного, отсортированного по убыванию
    # вывод его идентификатора и значения
    # lst_prices2 = lst_prices.copy();  lst_prices2.reverse()
    # lst_prices2 = list(reversed(lst_prices))
    # lst_prices2 = sorted(lst_prices)
    lst_prices2 = lst_prices[::-1]
    print(f"{list_name[2]}(ID = {id(lst_prices2)}):", lst_prices2)

    # D. Поиск 5 наибольних значений, вывод их на экран
    max_val = [-1, -1, -1, -1, -1]
    for price in lst_prices:
        for index in range(len(max_val)):
            if price > max_val[index]:
                for cur_max_val in range(3, -1, -1):
                    max_val[cur_max_val + 1] = max_val[cur_max_val]
                max_val[index] = price
                break
    print(f"\nМаксимальные значения: {max_val}")


if __name__ == "__main__":

    lesson2_task1()
    lesson2_task2()
    lesson2_task4()
    lesson2_task5()
    print('###########################################################################')

